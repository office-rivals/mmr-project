// <auto-generated />
using System;
using MMRProject.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MMRProject.Api.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MMRProject.Api.Data.Entities.ActiveMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TeamOnePlayerOneId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamOnePlayerTwoId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamTwoPlayerOneId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamTwoPlayerTwoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamOnePlayerOneId");

                    b.HasIndex("TeamOnePlayerTwoId");

                    b.HasIndex("TeamTwoPlayerOneId");

                    b.HasIndex("TeamTwoPlayerTwoId");

                    b.ToTable("ActiveMatches");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("season_id");

                    b.Property<long?>("TeamOneId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_one_id");

                    b.Property<long?>("TeamTwoId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_two_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("matches_pkey");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamOneId");

                    b.HasIndex("TeamTwoId");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_matches_deleted_at");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.MmrCalculation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long?>("TeamOnePlayerOneMmrDelta")
                        .HasColumnType("bigint")
                        .HasColumnName("team_one_player_one_mmr_delta");

                    b.Property<long?>("TeamOnePlayerTwoMmrDelta")
                        .HasColumnType("bigint")
                        .HasColumnName("team_one_player_two_mmr_delta");

                    b.Property<long?>("TeamTwoPlayerOneMmrDelta")
                        .HasColumnType("bigint")
                        .HasColumnName("team_two_player_one_mmr_delta");

                    b.Property<long?>("TeamTwoPlayerTwoMmrDelta")
                        .HasColumnType("bigint")
                        .HasColumnName("team_two_player_two_mmr_delta");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("mmr_calculations_pkey");

                    b.HasIndex("MatchId");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_mmr_calculations_deleted_at");

                    b.ToTable("mmr_calculations", (string)null);
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PendingMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActiveMatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMatchId")
                        .IsUnique();

                    b.ToTable("PendingMatches");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PersonalAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("TokenHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TokenHash");

                    b.ToTable("PersonalAccessTokens");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text")
                        .HasColumnName("identity_user_id");

                    b.Property<DateTime?>("MigratedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("migrated_at");

                    b.Property<long?>("Mmr")
                        .HasColumnType("bigint")
                        .HasColumnName("mmr");

                    b.Property<decimal?>("Mu")
                        .HasColumnType("numeric")
                        .HasColumnName("mu");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RoleAssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RoleAssignedById")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Sigma")
                        .HasColumnType("numeric")
                        .HasColumnName("sigma");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleAssignedById");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_players_deleted_at");

                    b.HasIndex(new[] { "Email" }, "idx_players_email");

                    b.HasIndex(new[] { "Id" }, "players_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "IdentityUserId" }, "uni_players_identity_user_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "uni_players_name")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PlayerHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long?>("Mmr")
                        .HasColumnType("bigint")
                        .HasColumnName("mmr");

                    b.Property<decimal?>("Mu")
                        .HasColumnType("numeric")
                        .HasColumnName("mu");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<decimal?>("Sigma")
                        .HasColumnType("numeric")
                        .HasColumnName("sigma");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("player_histories_pkey");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_player_histories_deleted_at");

                    b.ToTable("player_histories", (string)null);
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.QueuedPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastAcceptedMatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PendingMatchId")
                        .HasColumnType("uuid");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PendingMatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("QueuedPlayers");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("seasons_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_seasons_deleted_at");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("PlayerOneId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_one_id");

                    b.Property<long?>("PlayerTwoId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_two_id");

                    b.Property<long?>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool?>("Winner")
                        .HasColumnType("boolean")
                        .HasColumnName("winner");

                    b.HasKey("Id")
                        .HasName("teams_pkey");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex(new[] { "DeletedAt" }, "idx_teams_deleted_at");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.ActiveMatch", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Player", "TeamOnePlayerOne")
                        .WithMany()
                        .HasForeignKey("TeamOnePlayerOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "TeamOnePlayerTwo")
                        .WithMany()
                        .HasForeignKey("TeamOnePlayerTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "TeamTwoPlayerOne")
                        .WithMany()
                        .HasForeignKey("TeamTwoPlayerOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "TeamTwoPlayerTwo")
                        .WithMany()
                        .HasForeignKey("TeamTwoPlayerTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamOnePlayerOne");

                    b.Navigation("TeamOnePlayerTwo");

                    b.Navigation("TeamTwoPlayerOne");

                    b.Navigation("TeamTwoPlayerTwo");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Match", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("fk_matches_season");

                    b.HasOne("MMRProject.Api.Data.Entities.Team", "TeamOne")
                        .WithMany("MatchTeamOnes")
                        .HasForeignKey("TeamOneId")
                        .HasConstraintName("fk_matches_team_one");

                    b.HasOne("MMRProject.Api.Data.Entities.Team", "TeamTwo")
                        .WithMany("MatchTeamTwos")
                        .HasForeignKey("TeamTwoId")
                        .HasConstraintName("fk_matches_team_two");

                    b.Navigation("Season");

                    b.Navigation("TeamOne");

                    b.Navigation("TeamTwo");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.MmrCalculation", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Match", "Match")
                        .WithMany("MmrCalculations")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_matches_mmr_calculations");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PendingMatch", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.ActiveMatch", "ActiveMatch")
                        .WithOne("PendingMatch")
                        .HasForeignKey("MMRProject.Api.Data.Entities.PendingMatch", "ActiveMatchId");

                    b.Navigation("ActiveMatch");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PersonalAccessToken", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Player", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Player", "RoleAssignedBy")
                        .WithMany()
                        .HasForeignKey("RoleAssignedById");

                    b.Navigation("RoleAssignedBy");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PlayerHistory", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Match", "Match")
                        .WithMany("PlayerHistories")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_player_histories_match");

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "Player")
                        .WithMany("PlayerHistories")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_player_histories_player");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.QueuedPlayer", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.PendingMatch", "PendingMatch")
                        .WithMany("QueuedPlayers")
                        .HasForeignKey("PendingMatchId");

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingMatch");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Team", b =>
                {
                    b.HasOne("MMRProject.Api.Data.Entities.Player", "PlayerOne")
                        .WithMany("TeamPlayerOnes")
                        .HasForeignKey("PlayerOneId")
                        .HasConstraintName("fk_teams_player_one");

                    b.HasOne("MMRProject.Api.Data.Entities.Player", "PlayerTwo")
                        .WithMany("TeamPlayerTwos")
                        .HasForeignKey("PlayerTwoId")
                        .HasConstraintName("fk_teams_play_two");

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerTwo");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.ActiveMatch", b =>
                {
                    b.Navigation("PendingMatch");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Match", b =>
                {
                    b.Navigation("MmrCalculations");

                    b.Navigation("PlayerHistories");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.PendingMatch", b =>
                {
                    b.Navigation("QueuedPlayers");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Player", b =>
                {
                    b.Navigation("PlayerHistories");

                    b.Navigation("TeamPlayerOnes");

                    b.Navigation("TeamPlayerTwos");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Season", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("MMRProject.Api.Data.Entities.Team", b =>
                {
                    b.Navigation("MatchTeamOnes");

                    b.Navigation("MatchTeamTwos");
                });
#pragma warning restore 612, 618
        }
    }
}
