/* tslint:disable */
/* eslint-disable */
/**
 * MMRProject.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MatchDetailsV2,
  SubmitMatchV2Request,
} from '../models/index';
import {
    MatchDetailsV2FromJSON,
    MatchDetailsV2ToJSON,
    SubmitMatchV2RequestFromJSON,
    SubmitMatchV2RequestToJSON,
} from '../models/index';

export interface MMRV2GetMatchesRequest {
    userId?: number;
    limit?: number;
    offset?: number;
}

export interface MMRV2SubmitMatchRequest {
    submitMatchV2Request: SubmitMatchV2Request;
}

/**
 * 
 */
export class MMRV2Api extends runtime.BaseAPI {

    /**
     */
    async mMRV2GetMatchesRaw(requestParameters: MMRV2GetMatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MatchDetailsV2>>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/mmr/matches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatchDetailsV2FromJSON));
    }

    /**
     */
    async mMRV2GetMatches(requestParameters: MMRV2GetMatchesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MatchDetailsV2>> {
        const response = await this.mMRV2GetMatchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mMRV2SubmitMatchRaw(requestParameters: MMRV2SubmitMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submitMatchV2Request'] == null) {
            throw new runtime.RequiredError(
                'submitMatchV2Request',
                'Required parameter "submitMatchV2Request" was null or undefined when calling mMRV2SubmitMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/mmr/matches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitMatchV2RequestToJSON(requestParameters['submitMatchV2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mMRV2SubmitMatch(requestParameters: MMRV2SubmitMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mMRV2SubmitMatchRaw(requestParameters, initOverrides);
    }

}
