/* tslint:disable */
/* eslint-disable */
/**
 * MMRProject.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActiveMatchDto,
  ActiveMatchSubmitRequest,
  MatchMakingQueueStatus,
  PendingMatchDto,
} from '../models/index';
import {
    ActiveMatchDtoFromJSON,
    ActiveMatchDtoToJSON,
    ActiveMatchSubmitRequestFromJSON,
    ActiveMatchSubmitRequestToJSON,
    MatchMakingQueueStatusFromJSON,
    MatchMakingQueueStatusToJSON,
    PendingMatchDtoFromJSON,
    PendingMatchDtoToJSON,
} from '../models/index';

export interface MatchMakingAcceptMatchRequest {
    matchId: string;
}

export interface MatchMakingCancelActiveMatchRequest {
    matchId: string;
}

export interface MatchMakingDeclineMatchRequest {
    matchId: string;
}

export interface MatchMakingGetPendingMatchRequest {
    matchId: string;
}

export interface MatchMakingQueueForMatchMakingRequest {
    body: object;
}

export interface MatchMakingSubmitActiveMatchResultRequest {
    matchId: string;
    activeMatchSubmitRequest?: ActiveMatchSubmitRequest;
}

/**
 * 
 */
export class MatchMakingApi extends runtime.BaseAPI {

    /**
     */
    async matchMakingAcceptMatchRaw(requestParameters: MatchMakingAcceptMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMakingAcceptMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/pending-matches/{matchId}/accept`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingAcceptMatch(requestParameters: MatchMakingAcceptMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingAcceptMatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async matchMakingCancelActiveMatchRaw(requestParameters: MatchMakingCancelActiveMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMakingCancelActiveMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/active-matches/{matchId}`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingCancelActiveMatch(requestParameters: MatchMakingCancelActiveMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingCancelActiveMatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async matchMakingDeclineMatchRaw(requestParameters: MatchMakingDeclineMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMakingDeclineMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/pending-matches/{matchId}/decline`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingDeclineMatch(requestParameters: MatchMakingDeclineMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingDeclineMatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async matchMakingGetActiveMatchesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActiveMatchDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/active-matches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActiveMatchDtoFromJSON));
    }

    /**
     */
    async matchMakingGetActiveMatches(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActiveMatchDto>> {
        const response = await this.matchMakingGetActiveMatchesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async matchMakingGetMatchMakingQueueStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchMakingQueueStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchMakingQueueStatusFromJSON(jsonValue));
    }

    /**
     */
    async matchMakingGetMatchMakingQueueStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchMakingQueueStatus> {
        const response = await this.matchMakingGetMatchMakingQueueStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async matchMakingGetPendingMatchRaw(requestParameters: MatchMakingGetPendingMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PendingMatchDto>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMakingGetPendingMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/pending-matches/{matchId}`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PendingMatchDtoFromJSON(jsonValue));
    }

    /**
     */
    async matchMakingGetPendingMatch(requestParameters: MatchMakingGetPendingMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PendingMatchDto> {
        const response = await this.matchMakingGetPendingMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async matchMakingLeaveMatchMakingQueueRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/match-making/queue`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingLeaveMatchMakingQueue(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingLeaveMatchMakingQueueRaw(initOverrides);
    }

    /**
     */
    async matchMakingQueueForMatchMakingRaw(requestParameters: MatchMakingQueueForMatchMakingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling matchMakingQueueForMatchMaking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/match-making/queue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingQueueForMatchMaking(requestParameters: MatchMakingQueueForMatchMakingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingQueueForMatchMakingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async matchMakingSubmitActiveMatchResultRaw(requestParameters: MatchMakingSubmitActiveMatchResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMakingSubmitActiveMatchResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/match-making/active-matches/{matchId}/submit`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActiveMatchSubmitRequestToJSON(requestParameters['activeMatchSubmitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async matchMakingSubmitActiveMatchResult(requestParameters: MatchMakingSubmitActiveMatchResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.matchMakingSubmitActiveMatchResultRaw(requestParameters, initOverrides);
    }

}
