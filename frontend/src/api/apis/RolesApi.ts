/* tslint:disable */
/* eslint-disable */
/**
 * MMRProject.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignRoleRequest,
  PlayerRoleResponse,
} from '../models/index';
import {
    AssignRoleRequestFromJSON,
    AssignRoleRequestToJSON,
    PlayerRoleResponseFromJSON,
    PlayerRoleResponseToJSON,
} from '../models/index';

export interface RolesAssignRoleRequest {
    assignRoleRequest?: AssignRoleRequest;
}

export interface RolesGetPlayerRoleRequest {
    playerId: number;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     */
    async rolesAssignRoleRaw(requestParameters: RolesAssignRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/roles/assign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleRequestToJSON(requestParameters['assignRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rolesAssignRole(requestParameters: RolesAssignRoleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolesAssignRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async rolesGetMyRoleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerRoleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async rolesGetMyRole(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerRoleResponse> {
        const response = await this.rolesGetMyRoleRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async rolesGetPlayerRoleRaw(requestParameters: RolesGetPlayerRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerRoleResponse>> {
        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling rolesGetPlayerRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles/player/{playerId}`.replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async rolesGetPlayerRole(requestParameters: RolesGetPlayerRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerRoleResponse> {
        const response = await this.rolesGetPlayerRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
